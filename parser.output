Terminals which are not used

   '.'


Grammar

    0 $accept: file $end

    1 file: Class

    2 Class: CLASS IDENTIFIER '{' fields '}'

    3 field: Global
    4      | function

    5 fields: /* empty */
    6       | fields field

    7 Global: Data_Type IDENTIFIER ';'
    8       | Data_Type IDENTIFIER '=' expression ';'

    9 variables: /* empty */
   10          | variable
   11          | variables ',' variable

   12 variable: Data_Type IDENTIFIER
   13         | Data_Type IDENTIFIER '=' expression

   14 @1: /* empty */

   15 function: Data_Type IDENTIFIER @1 '(' Params ')' '{' statements '}'

   16 @2: /* empty */

   17 function: VOID IDENTIFIER @2 '(' Params ')' '{' statements '}'

   18 statements: /* empty */
   19           | statements statement

   20 statement: RETURN expression ';'
   21          | IDENTIFIER '=' expression ';'
   22          | variables ';'
   23          | IDENTIFIER '[' expression ']' '=' expression ';'
   24          | IF expression statement
   25          | IF expression statement ELSE statement
   26          | WHILE '(' expression ')' statement
   27          | FOR '(' variable ';' expr_empty ';' expr_empty ')' statement
   28          | IDENTIFIER '(' expression_Or_No ')' ';'
   29          | '{' statements '}'
   30          | IDENTIFIER INCREMENT
   31          | IDENTIFIER DECREMENT

   32 expression: IDENTIFIER
   33           | INTEGER
   34           | DOUBLENUM
   35           | TRUE
   36           | FALSE
   37           | IDENTIFIER '[' expression ']'
   38           | NEW primitive_type '[' INTEGER ']'
   39           | expression '+' expression
   40           | expression '-' expression
   41           | expression '*' expression
   42           | expression '/' expression
   43           | '-' expression
   44           | expression '<' expression
   45           | expression '>' expression
   46           | expression EQ expression
   47           | expression NEQ expression
   48           | expression LOQ expression
   49           | expression MOQ expression
   50           | IDENTIFIER INCREMENT
   51           | IDENTIFIER DECREMENT
   52           | expression AND expression
   53           | expression OR expression
   54           | NOT expression
   55           | IDENTIFIER '(' expression_Or_No ')'

   56 expr_empty: /* empty */
   57           | expression

   58 expression_Or_No: /* empty */
   59                 | expression
   60                 | expression_Or_No ',' expression

   61 Param: Data_Type IDENTIFIER

   62 Params: /* empty */
   63       | Param
   64       | Params ',' Param

   65 Data_Type: primitive_type
   66          | Array_type

   67 primitive_type: INT
   68               | DOUBLE
   69               | BOOL

   70 Array_type: INT '[' ']'
   71           | DOUBLE '[' ']'
   72           | BOOL '[' ']'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 15 17 26 27 28 55
')' (41) 15 17 26 27 28 55
'*' (42) 41
'+' (43) 39
',' (44) 11 60 64
'-' (45) 40 43
'.' (46)
'/' (47) 42
';' (59) 7 8 20 21 22 23 27 28
'<' (60) 44
'=' (61) 8 13 21 23
'>' (62) 45
'[' (91) 23 37 38 70 71 72
']' (93) 23 37 38 70 71 72
'{' (123) 2 15 17 29
'}' (125) 2 15 17 29
error (256)
INT (258) 67 70
IDENTIFIER (259) 2 7 8 12 13 15 17 21 23 28 30 31 32 37 50 51 55 61
RETURN (260) 20
INTEGER (261) 33 38
DOUBLENUM (262) 34
CLASS (263) 2
FOR (264) 27
NEW (265) 38
IF (266) 24 25
WHILE (267) 26
DOUBLE (268) 68 71
BOOL (269) 69 72
VOID (270) 17
TRUE (271) 35
FALSE (272) 36
IFPREC (273)
ELSE (274) 25
OR (275) 53
AND (276) 52
NEQ (277) 47
EQ (278) 46
LOQ (279) 48
MOQ (280) 49
MINUS (281)
INCREMENT (282) 30 50
DECREMENT (283) 31 51
NOT (284) 54


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
file (47)
    on left: 1, on right: 0
Class (48)
    on left: 2, on right: 1
field (49)
    on left: 3 4, on right: 6
fields (50)
    on left: 5 6, on right: 2 6
Global (51)
    on left: 7 8, on right: 3
variables (52)
    on left: 9 10 11, on right: 11 22
variable (53)
    on left: 12 13, on right: 10 11 27
function (54)
    on left: 15 17, on right: 4
@1 (55)
    on left: 14, on right: 15
@2 (56)
    on left: 16, on right: 17
statements (57)
    on left: 18 19, on right: 15 17 19 29
statement (58)
    on left: 20 21 22 23 24 25 26 27 28 29 30 31, on right: 19 24 25
    26 27
expression (59)
    on left: 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
    50 51 52 53 54 55, on right: 8 13 20 21 23 24 25 26 37 39 40 41
    42 43 44 45 46 47 48 49 52 53 54 57 59 60
expr_empty (60)
    on left: 56 57, on right: 27
expression_Or_No (61)
    on left: 58 59 60, on right: 28 55 60
Param (62)
    on left: 61, on right: 63 64
Params (63)
    on left: 62 63 64, on right: 15 17 64
Data_Type (64)
    on left: 65 66, on right: 7 8 12 13 15 61
primitive_type (65)
    on left: 67 68 69, on right: 38 65
Array_type (66)
    on left: 70 71 72, on right: 66


state 0

    0 $accept: . file $end

    CLASS  shift, and go to state 1

    file   go to state 2
    Class  go to state 3


state 1

    2 Class: CLASS . IDENTIFIER '{' fields '}'

    IDENTIFIER  shift, and go to state 4


state 2

    0 $accept: file . $end

    $end  shift, and go to state 5


state 3

    1 file: Class .

    $default  reduce using rule 1 (file)


state 4

    2 Class: CLASS IDENTIFIER . '{' fields '}'

    '{'  shift, and go to state 6


state 5

    0 $accept: file $end .

    $default  accept


state 6

    2 Class: CLASS IDENTIFIER '{' . fields '}'

    $default  reduce using rule 5 (fields)

    fields  go to state 7


state 7

    2 Class: CLASS IDENTIFIER '{' fields . '}'
    6 fields: fields . field

    INT     shift, and go to state 8
    DOUBLE  shift, and go to state 9
    BOOL    shift, and go to state 10
    VOID    shift, and go to state 11
    '}'     shift, and go to state 12

    field           go to state 13
    Global          go to state 14
    function        go to state 15
    Data_Type       go to state 16
    primitive_type  go to state 17
    Array_type      go to state 18


state 8

   67 primitive_type: INT .
   70 Array_type: INT . '[' ']'

    '['  shift, and go to state 19

    $default  reduce using rule 67 (primitive_type)


state 9

   68 primitive_type: DOUBLE .
   71 Array_type: DOUBLE . '[' ']'

    '['  shift, and go to state 20

    $default  reduce using rule 68 (primitive_type)


state 10

   69 primitive_type: BOOL .
   72 Array_type: BOOL . '[' ']'

    '['  shift, and go to state 21

    $default  reduce using rule 69 (primitive_type)


state 11

   17 function: VOID . IDENTIFIER @2 '(' Params ')' '{' statements '}'

    IDENTIFIER  shift, and go to state 22


state 12

    2 Class: CLASS IDENTIFIER '{' fields '}' .

    $default  reduce using rule 2 (Class)


state 13

    6 fields: fields field .

    $default  reduce using rule 6 (fields)


state 14

    3 field: Global .

    $default  reduce using rule 3 (field)


state 15

    4 field: function .

    $default  reduce using rule 4 (field)


state 16

    7 Global: Data_Type . IDENTIFIER ';'
    8       | Data_Type . IDENTIFIER '=' expression ';'
   15 function: Data_Type . IDENTIFIER @1 '(' Params ')' '{' statements '}'

    IDENTIFIER  shift, and go to state 23


state 17

   65 Data_Type: primitive_type .

    $default  reduce using rule 65 (Data_Type)


state 18

   66 Data_Type: Array_type .

    $default  reduce using rule 66 (Data_Type)


state 19

   70 Array_type: INT '[' . ']'

    ']'  shift, and go to state 24


state 20

   71 Array_type: DOUBLE '[' . ']'

    ']'  shift, and go to state 25


state 21

   72 Array_type: BOOL '[' . ']'

    ']'  shift, and go to state 26


state 22

   17 function: VOID IDENTIFIER . @2 '(' Params ')' '{' statements '}'

    $default  reduce using rule 16 (@2)

    @2  go to state 27


state 23

    7 Global: Data_Type IDENTIFIER . ';'
    8       | Data_Type IDENTIFIER . '=' expression ';'
   15 function: Data_Type IDENTIFIER . @1 '(' Params ')' '{' statements '}'

    '='  shift, and go to state 28
    ';'  shift, and go to state 29

    $default  reduce using rule 14 (@1)

    @1  go to state 30


state 24

   70 Array_type: INT '[' ']' .

    $default  reduce using rule 70 (Array_type)


state 25

   71 Array_type: DOUBLE '[' ']' .

    $default  reduce using rule 71 (Array_type)


state 26

   72 Array_type: BOOL '[' ']' .

    $default  reduce using rule 72 (Array_type)


state 27

   17 function: VOID IDENTIFIER @2 . '(' Params ')' '{' statements '}'

    '('  shift, and go to state 31


state 28

    8 Global: Data_Type IDENTIFIER '=' . expression ';'

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 40


state 29

    7 Global: Data_Type IDENTIFIER ';' .

    $default  reduce using rule 7 (Global)


state 30

   15 function: Data_Type IDENTIFIER @1 . '(' Params ')' '{' statements '}'

    '('  shift, and go to state 41


state 31

   17 function: VOID IDENTIFIER @2 '(' . Params ')' '{' statements '}'

    INT     shift, and go to state 8
    DOUBLE  shift, and go to state 9
    BOOL    shift, and go to state 10

    $default  reduce using rule 62 (Params)

    Param           go to state 42
    Params          go to state 43
    Data_Type       go to state 44
    primitive_type  go to state 17
    Array_type      go to state 18


state 32

   32 expression: IDENTIFIER .
   37           | IDENTIFIER . '[' expression ']'
   50           | IDENTIFIER . INCREMENT
   51           | IDENTIFIER . DECREMENT
   55           | IDENTIFIER . '(' expression_Or_No ')'

    INCREMENT  shift, and go to state 45
    DECREMENT  shift, and go to state 46
    '('        shift, and go to state 47
    '['        shift, and go to state 48

    $default  reduce using rule 32 (expression)


state 33

   33 expression: INTEGER .

    $default  reduce using rule 33 (expression)


state 34

   34 expression: DOUBLENUM .

    $default  reduce using rule 34 (expression)


state 35

   38 expression: NEW . primitive_type '[' INTEGER ']'

    INT     shift, and go to state 49
    DOUBLE  shift, and go to state 50
    BOOL    shift, and go to state 51

    primitive_type  go to state 52


state 36

   35 expression: TRUE .

    $default  reduce using rule 35 (expression)


state 37

   36 expression: FALSE .

    $default  reduce using rule 36 (expression)


state 38

   43 expression: '-' . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 53


state 39

   54 expression: NOT . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 54


state 40

    8 Global: Data_Type IDENTIFIER '=' expression . ';'
   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    OR   shift, and go to state 55
    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    ';'  shift, and go to state 67


state 41

   15 function: Data_Type IDENTIFIER @1 '(' . Params ')' '{' statements '}'

    INT     shift, and go to state 8
    DOUBLE  shift, and go to state 9
    BOOL    shift, and go to state 10

    $default  reduce using rule 62 (Params)

    Param           go to state 42
    Params          go to state 68
    Data_Type       go to state 44
    primitive_type  go to state 17
    Array_type      go to state 18


state 42

   63 Params: Param .

    $default  reduce using rule 63 (Params)


state 43

   17 function: VOID IDENTIFIER @2 '(' Params . ')' '{' statements '}'
   64 Params: Params . ',' Param

    ','  shift, and go to state 69
    ')'  shift, and go to state 70


state 44

   61 Param: Data_Type . IDENTIFIER

    IDENTIFIER  shift, and go to state 71


state 45

   50 expression: IDENTIFIER INCREMENT .

    $default  reduce using rule 50 (expression)


state 46

   51 expression: IDENTIFIER DECREMENT .

    $default  reduce using rule 51 (expression)


state 47

   55 expression: IDENTIFIER '(' . expression_Or_No ')'

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    $default  reduce using rule 58 (expression_Or_No)

    expression        go to state 72
    expression_Or_No  go to state 73


state 48

   37 expression: IDENTIFIER '[' . expression ']'

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 74


state 49

   67 primitive_type: INT .

    $default  reduce using rule 67 (primitive_type)


state 50

   68 primitive_type: DOUBLE .

    $default  reduce using rule 68 (primitive_type)


state 51

   69 primitive_type: BOOL .

    $default  reduce using rule 69 (primitive_type)


state 52

   38 expression: NEW primitive_type . '[' INTEGER ']'

    '['  shift, and go to state 75


state 53

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   43           | '-' expression .
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    $default  reduce using rule 43 (expression)


state 54

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression
   54           | NOT expression .

    $default  reduce using rule 54 (expression)


state 55

   53 expression: expression OR . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 76


state 56

   52 expression: expression AND . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 77


state 57

   47 expression: expression NEQ . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 78


state 58

   46 expression: expression EQ . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 79


state 59

   45 expression: expression '>' . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 80


state 60

   44 expression: expression '<' . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 81


state 61

   48 expression: expression LOQ . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 82


state 62

   49 expression: expression MOQ . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 83


state 63

   39 expression: expression '+' . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 84


state 64

   40 expression: expression '-' . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 85


state 65

   41 expression: expression '*' . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 86


state 66

   42 expression: expression '/' . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 87


state 67

    8 Global: Data_Type IDENTIFIER '=' expression ';' .

    $default  reduce using rule 8 (Global)


state 68

   15 function: Data_Type IDENTIFIER @1 '(' Params . ')' '{' statements '}'
   64 Params: Params . ',' Param

    ','  shift, and go to state 69
    ')'  shift, and go to state 88


state 69

   64 Params: Params ',' . Param

    INT     shift, and go to state 8
    DOUBLE  shift, and go to state 9
    BOOL    shift, and go to state 10

    Param           go to state 89
    Data_Type       go to state 44
    primitive_type  go to state 17
    Array_type      go to state 18


state 70

   17 function: VOID IDENTIFIER @2 '(' Params ')' . '{' statements '}'

    '{'  shift, and go to state 90


state 71

   61 Param: Data_Type IDENTIFIER .

    $default  reduce using rule 61 (Param)


state 72

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression
   59 expression_Or_No: expression .

    OR   shift, and go to state 55
    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 59 (expression_Or_No)


state 73

   55 expression: IDENTIFIER '(' expression_Or_No . ')'
   60 expression_Or_No: expression_Or_No . ',' expression

    ','  shift, and go to state 91
    ')'  shift, and go to state 92


state 74

   37 expression: IDENTIFIER '[' expression . ']'
   39           | expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    OR   shift, and go to state 55
    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    ']'  shift, and go to state 93


state 75

   38 expression: NEW primitive_type '[' . INTEGER ']'

    INTEGER  shift, and go to state 94


state 76

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression
   53           | expression OR expression .

    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 53 (expression)


state 77

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   52           | expression AND expression .
   53           | expression . OR expression

    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 52 (expression)


state 78

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   47           | expression NEQ expression .
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 47 (expression)


state 79

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   46           | expression EQ expression .
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 46 (expression)


state 80

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   45           | expression '>' expression .
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    '>'  error (nonassociative)
    '<'  error (nonassociative)
    LOQ  error (nonassociative)
    MOQ  error (nonassociative)

    $default  reduce using rule 45 (expression)


state 81

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   44           | expression '<' expression .
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    '>'  error (nonassociative)
    '<'  error (nonassociative)
    LOQ  error (nonassociative)
    MOQ  error (nonassociative)

    $default  reduce using rule 44 (expression)


state 82

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   48           | expression LOQ expression .
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    '>'  error (nonassociative)
    '<'  error (nonassociative)
    LOQ  error (nonassociative)
    MOQ  error (nonassociative)

    $default  reduce using rule 48 (expression)


state 83

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   49           | expression MOQ expression .
   52           | expression . AND expression
   53           | expression . OR expression

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    '>'  error (nonassociative)
    '<'  error (nonassociative)
    LOQ  error (nonassociative)
    MOQ  error (nonassociative)

    $default  reduce using rule 49 (expression)


state 84

   39 expression: expression . '+' expression
   39           | expression '+' expression .
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 39 (expression)


state 85

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   40           | expression '-' expression .
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 40 (expression)


state 86

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   41           | expression '*' expression .
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    $default  reduce using rule 41 (expression)


state 87

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   42           | expression '/' expression .
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    $default  reduce using rule 42 (expression)


state 88

   15 function: Data_Type IDENTIFIER @1 '(' Params ')' . '{' statements '}'

    '{'  shift, and go to state 95


state 89

   64 Params: Params ',' Param .

    $default  reduce using rule 64 (Params)


state 90

   17 function: VOID IDENTIFIER @2 '(' Params ')' '{' . statements '}'

    $default  reduce using rule 18 (statements)

    statements  go to state 96


state 91

   60 expression_Or_No: expression_Or_No ',' . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 97


state 92

   55 expression: IDENTIFIER '(' expression_Or_No ')' .

    $default  reduce using rule 55 (expression)


state 93

   37 expression: IDENTIFIER '[' expression ']' .

    $default  reduce using rule 37 (expression)


state 94

   38 expression: NEW primitive_type '[' INTEGER . ']'

    ']'  shift, and go to state 98


state 95

   15 function: Data_Type IDENTIFIER @1 '(' Params ')' '{' . statements '}'

    $default  reduce using rule 18 (statements)

    statements  go to state 99


state 96

   17 function: VOID IDENTIFIER @2 '(' Params ')' '{' statements . '}'
   19 statements: statements . statement

    INT         shift, and go to state 8
    IDENTIFIER  shift, and go to state 100
    RETURN      shift, and go to state 101
    FOR         shift, and go to state 102
    IF          shift, and go to state 103
    WHILE       shift, and go to state 104
    DOUBLE      shift, and go to state 9
    BOOL        shift, and go to state 10
    '{'         shift, and go to state 105
    '}'         shift, and go to state 106

    $default  reduce using rule 9 (variables)

    variables       go to state 107
    variable        go to state 108
    statement       go to state 109
    Data_Type       go to state 110
    primitive_type  go to state 17
    Array_type      go to state 18


state 97

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression
   60 expression_Or_No: expression_Or_No ',' expression .

    OR   shift, and go to state 55
    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 60 (expression_Or_No)


state 98

   38 expression: NEW primitive_type '[' INTEGER ']' .

    $default  reduce using rule 38 (expression)


state 99

   15 function: Data_Type IDENTIFIER @1 '(' Params ')' '{' statements . '}'
   19 statements: statements . statement

    INT         shift, and go to state 8
    IDENTIFIER  shift, and go to state 100
    RETURN      shift, and go to state 101
    FOR         shift, and go to state 102
    IF          shift, and go to state 103
    WHILE       shift, and go to state 104
    DOUBLE      shift, and go to state 9
    BOOL        shift, and go to state 10
    '{'         shift, and go to state 105
    '}'         shift, and go to state 111

    $default  reduce using rule 9 (variables)

    variables       go to state 107
    variable        go to state 108
    statement       go to state 109
    Data_Type       go to state 110
    primitive_type  go to state 17
    Array_type      go to state 18


state 100

   21 statement: IDENTIFIER . '=' expression ';'
   23          | IDENTIFIER . '[' expression ']' '=' expression ';'
   28          | IDENTIFIER . '(' expression_Or_No ')' ';'
   30          | IDENTIFIER . INCREMENT
   31          | IDENTIFIER . DECREMENT

    '='        shift, and go to state 112
    INCREMENT  shift, and go to state 113
    DECREMENT  shift, and go to state 114
    '('        shift, and go to state 115
    '['        shift, and go to state 116


state 101

   20 statement: RETURN . expression ';'

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 117


state 102

   27 statement: FOR . '(' variable ';' expr_empty ';' expr_empty ')' statement

    '('  shift, and go to state 118


state 103

   24 statement: IF . expression statement
   25          | IF . expression statement ELSE statement

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 119


state 104

   26 statement: WHILE . '(' expression ')' statement

    '('  shift, and go to state 120


state 105

   29 statement: '{' . statements '}'

    $default  reduce using rule 18 (statements)

    statements  go to state 121


state 106

   17 function: VOID IDENTIFIER @2 '(' Params ')' '{' statements '}' .

    $default  reduce using rule 17 (function)


state 107

   11 variables: variables . ',' variable
   22 statement: variables . ';'

    ';'  shift, and go to state 122
    ','  shift, and go to state 123


state 108

   10 variables: variable .

    $default  reduce using rule 10 (variables)


state 109

   19 statements: statements statement .

    $default  reduce using rule 19 (statements)


state 110

   12 variable: Data_Type . IDENTIFIER
   13         | Data_Type . IDENTIFIER '=' expression

    IDENTIFIER  shift, and go to state 124


state 111

   15 function: Data_Type IDENTIFIER @1 '(' Params ')' '{' statements '}' .

    $default  reduce using rule 15 (function)


state 112

   21 statement: IDENTIFIER '=' . expression ';'

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 125


state 113

   30 statement: IDENTIFIER INCREMENT .

    $default  reduce using rule 30 (statement)


state 114

   31 statement: IDENTIFIER DECREMENT .

    $default  reduce using rule 31 (statement)


state 115

   28 statement: IDENTIFIER '(' . expression_Or_No ')' ';'

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    $default  reduce using rule 58 (expression_Or_No)

    expression        go to state 72
    expression_Or_No  go to state 126


state 116

   23 statement: IDENTIFIER '[' . expression ']' '=' expression ';'

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 127


state 117

   20 statement: RETURN expression . ';'
   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    OR   shift, and go to state 55
    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    ';'  shift, and go to state 128


state 118

   27 statement: FOR '(' . variable ';' expr_empty ';' expr_empty ')' statement

    INT     shift, and go to state 8
    DOUBLE  shift, and go to state 9
    BOOL    shift, and go to state 10

    variable        go to state 129
    Data_Type       go to state 110
    primitive_type  go to state 17
    Array_type      go to state 18


state 119

   24 statement: IF expression . statement
   25          | IF expression . statement ELSE statement
   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    INT         shift, and go to state 8
    IDENTIFIER  shift, and go to state 100
    RETURN      shift, and go to state 101
    FOR         shift, and go to state 102
    IF          shift, and go to state 103
    WHILE       shift, and go to state 104
    DOUBLE      shift, and go to state 9
    BOOL        shift, and go to state 10
    OR          shift, and go to state 55
    AND         shift, and go to state 56
    NEQ         shift, and go to state 57
    EQ          shift, and go to state 58
    '>'         shift, and go to state 59
    '<'         shift, and go to state 60
    LOQ         shift, and go to state 61
    MOQ         shift, and go to state 62
    '+'         shift, and go to state 63
    '-'         shift, and go to state 64
    '*'         shift, and go to state 65
    '/'         shift, and go to state 66
    '{'         shift, and go to state 105

    $default  reduce using rule 9 (variables)

    variables       go to state 107
    variable        go to state 108
    statement       go to state 130
    Data_Type       go to state 110
    primitive_type  go to state 17
    Array_type      go to state 18


state 120

   26 statement: WHILE '(' . expression ')' statement

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 131


state 121

   19 statements: statements . statement
   29 statement: '{' statements . '}'

    INT         shift, and go to state 8
    IDENTIFIER  shift, and go to state 100
    RETURN      shift, and go to state 101
    FOR         shift, and go to state 102
    IF          shift, and go to state 103
    WHILE       shift, and go to state 104
    DOUBLE      shift, and go to state 9
    BOOL        shift, and go to state 10
    '{'         shift, and go to state 105
    '}'         shift, and go to state 132

    $default  reduce using rule 9 (variables)

    variables       go to state 107
    variable        go to state 108
    statement       go to state 109
    Data_Type       go to state 110
    primitive_type  go to state 17
    Array_type      go to state 18


state 122

   22 statement: variables ';' .

    $default  reduce using rule 22 (statement)


state 123

   11 variables: variables ',' . variable

    INT     shift, and go to state 8
    DOUBLE  shift, and go to state 9
    BOOL    shift, and go to state 10

    variable        go to state 133
    Data_Type       go to state 110
    primitive_type  go to state 17
    Array_type      go to state 18


state 124

   12 variable: Data_Type IDENTIFIER .
   13         | Data_Type IDENTIFIER . '=' expression

    '='  shift, and go to state 134

    $default  reduce using rule 12 (variable)


state 125

   21 statement: IDENTIFIER '=' expression . ';'
   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    OR   shift, and go to state 55
    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    ';'  shift, and go to state 135


state 126

   28 statement: IDENTIFIER '(' expression_Or_No . ')' ';'
   60 expression_Or_No: expression_Or_No . ',' expression

    ','  shift, and go to state 91
    ')'  shift, and go to state 136


state 127

   23 statement: IDENTIFIER '[' expression . ']' '=' expression ';'
   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    OR   shift, and go to state 55
    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    ']'  shift, and go to state 137


state 128

   20 statement: RETURN expression ';' .

    $default  reduce using rule 20 (statement)


state 129

   27 statement: FOR '(' variable . ';' expr_empty ';' expr_empty ')' statement

    ';'  shift, and go to state 138


state 130

   24 statement: IF expression statement .
   25          | IF expression statement . ELSE statement

    ELSE  shift, and go to state 139

    $default  reduce using rule 24 (statement)


state 131

   26 statement: WHILE '(' expression . ')' statement
   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    OR   shift, and go to state 55
    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    ')'  shift, and go to state 140


state 132

   29 statement: '{' statements '}' .

    $default  reduce using rule 29 (statement)


state 133

   11 variables: variables ',' variable .

    $default  reduce using rule 11 (variables)


state 134

   13 variable: Data_Type IDENTIFIER '=' . expression

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 141


state 135

   21 statement: IDENTIFIER '=' expression ';' .

    $default  reduce using rule 21 (statement)


state 136

   28 statement: IDENTIFIER '(' expression_Or_No ')' . ';'

    ';'  shift, and go to state 142


state 137

   23 statement: IDENTIFIER '[' expression ']' . '=' expression ';'

    '='  shift, and go to state 143


state 138

   27 statement: FOR '(' variable ';' . expr_empty ';' expr_empty ')' statement

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    $default  reduce using rule 56 (expr_empty)

    expression  go to state 144
    expr_empty  go to state 145


state 139

   25 statement: IF expression statement ELSE . statement

    INT         shift, and go to state 8
    IDENTIFIER  shift, and go to state 100
    RETURN      shift, and go to state 101
    FOR         shift, and go to state 102
    IF          shift, and go to state 103
    WHILE       shift, and go to state 104
    DOUBLE      shift, and go to state 9
    BOOL        shift, and go to state 10
    '{'         shift, and go to state 105

    $default  reduce using rule 9 (variables)

    variables       go to state 107
    variable        go to state 108
    statement       go to state 146
    Data_Type       go to state 110
    primitive_type  go to state 17
    Array_type      go to state 18


state 140

   26 statement: WHILE '(' expression ')' . statement

    INT         shift, and go to state 8
    IDENTIFIER  shift, and go to state 100
    RETURN      shift, and go to state 101
    FOR         shift, and go to state 102
    IF          shift, and go to state 103
    WHILE       shift, and go to state 104
    DOUBLE      shift, and go to state 9
    BOOL        shift, and go to state 10
    '{'         shift, and go to state 105

    $default  reduce using rule 9 (variables)

    variables       go to state 107
    variable        go to state 108
    statement       go to state 147
    Data_Type       go to state 110
    primitive_type  go to state 17
    Array_type      go to state 18


state 141

   13 variable: Data_Type IDENTIFIER '=' expression .
   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    OR   shift, and go to state 55
    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 13 (variable)


state 142

   28 statement: IDENTIFIER '(' expression_Or_No ')' ';' .

    $default  reduce using rule 28 (statement)


state 143

   23 statement: IDENTIFIER '[' expression ']' '=' . expression ';'

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    expression  go to state 148


state 144

   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression
   57 expr_empty: expression .

    OR   shift, and go to state 55
    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 57 (expr_empty)


state 145

   27 statement: FOR '(' variable ';' expr_empty . ';' expr_empty ')' statement

    ';'  shift, and go to state 149


state 146

   25 statement: IF expression statement ELSE statement .

    $default  reduce using rule 25 (statement)


state 147

   26 statement: WHILE '(' expression ')' statement .

    $default  reduce using rule 26 (statement)


state 148

   23 statement: IDENTIFIER '[' expression ']' '=' expression . ';'
   39 expression: expression . '+' expression
   40           | expression . '-' expression
   41           | expression . '*' expression
   42           | expression . '/' expression
   44           | expression . '<' expression
   45           | expression . '>' expression
   46           | expression . EQ expression
   47           | expression . NEQ expression
   48           | expression . LOQ expression
   49           | expression . MOQ expression
   52           | expression . AND expression
   53           | expression . OR expression

    OR   shift, and go to state 55
    AND  shift, and go to state 56
    NEQ  shift, and go to state 57
    EQ   shift, and go to state 58
    '>'  shift, and go to state 59
    '<'  shift, and go to state 60
    LOQ  shift, and go to state 61
    MOQ  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    ';'  shift, and go to state 150


state 149

   27 statement: FOR '(' variable ';' expr_empty ';' . expr_empty ')' statement

    IDENTIFIER  shift, and go to state 32
    INTEGER     shift, and go to state 33
    DOUBLENUM   shift, and go to state 34
    NEW         shift, and go to state 35
    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    '-'         shift, and go to state 38
    NOT         shift, and go to state 39

    $default  reduce using rule 56 (expr_empty)

    expression  go to state 144
    expr_empty  go to state 151


state 150

   23 statement: IDENTIFIER '[' expression ']' '=' expression ';' .

    $default  reduce using rule 23 (statement)


state 151

   27 statement: FOR '(' variable ';' expr_empty ';' expr_empty . ')' statement

    ')'  shift, and go to state 152


state 152

   27 statement: FOR '(' variable ';' expr_empty ';' expr_empty ')' . statement

    INT         shift, and go to state 8
    IDENTIFIER  shift, and go to state 100
    RETURN      shift, and go to state 101
    FOR         shift, and go to state 102
    IF          shift, and go to state 103
    WHILE       shift, and go to state 104
    DOUBLE      shift, and go to state 9
    BOOL        shift, and go to state 10
    '{'         shift, and go to state 105

    $default  reduce using rule 9 (variables)

    variables       go to state 107
    variable        go to state 108
    statement       go to state 153
    Data_Type       go to state 110
    primitive_type  go to state 17
    Array_type      go to state 18


state 153

   27 statement: FOR '(' variable ';' expr_empty ';' expr_empty ')' statement .

    $default  reduce using rule 27 (statement)
